/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface GetSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGetRequest {
    stationId: number;
    sensorId: number;
    campaignId: number;
}

export interface GetSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGetRequest {
    campaignId: number;
    stationId: number;
    page?: number;
    limit?: number;
}

/**
 * 
 */
export class SensorsApi extends runtime.BaseAPI {

    /**
     * Get Sensor
     */
    async getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGetRaw(requestParameters: GetSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGet().'
            );
        }

        if (requestParameters['sensorId'] == null) {
            throw new runtime.RequiredError(
                'sensorId',
                'Required parameter "sensorId" was null or undefined when calling getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGet().'
            );
        }

        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}/sensors/{sensor_id}`.replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))).replace(`{${"sensor_id"}}`, encodeURIComponent(String(requestParameters['sensorId']))).replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Sensor
     */
    async getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGet(requestParameters: GetSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Sensors
     */
    async getSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGetRaw(requestParameters: GetSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGet().'
            );
        }

        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling getSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}/sensors`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Sensors
     */
    async getSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGet(requestParameters: GetSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
