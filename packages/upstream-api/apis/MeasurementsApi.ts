/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AggregatedMeasurement,
  HTTPValidationError,
  ListMeasurementsResponsePagination,
} from '../models/index';
import {
    AggregatedMeasurementFromJSON,
    AggregatedMeasurementToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ListMeasurementsResponsePaginationFromJSON,
    ListMeasurementsResponsePaginationToJSON,
} from '../models/index';

export interface GetMeasurementsWithConfidenceIntervalsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsConfidenceIntervalsGetRequest {
    campaignId: number;
    stationId: number;
    sensorId: number;
    interval?: string;
    intervalValue?: number;
    startDate?: Date | null;
    endDate?: Date | null;
    minValue?: number | null;
    maxValue?: number | null;
}

export interface GetSensorMeasurementsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsGetRequest {
    campaignId: number;
    stationId: number;
    sensorId: number;
    startDate?: Date | null;
    endDate?: Date | null;
    minMeasurementValue?: number | null;
    maxMeasurementValue?: number | null;
    limit?: number;
    page?: number;
    downsampleThreshold?: number | null;
}

/**
 * 
 */
export class MeasurementsApi extends runtime.BaseAPI {

    /**
     * Get sensor measurements with confidence intervals for visualization.
     * Get Measurements With Confidence Intervals
     */
    async getMeasurementsWithConfidenceIntervalsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsConfidenceIntervalsGetRaw(requestParameters: GetMeasurementsWithConfidenceIntervalsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsConfidenceIntervalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AggregatedMeasurement>>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getMeasurementsWithConfidenceIntervalsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsConfidenceIntervalsGet().'
            );
        }

        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling getMeasurementsWithConfidenceIntervalsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsConfidenceIntervalsGet().'
            );
        }

        if (requestParameters['sensorId'] == null) {
            throw new runtime.RequiredError(
                'sensorId',
                'Required parameter "sensorId" was null or undefined when calling getMeasurementsWithConfidenceIntervalsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsConfidenceIntervalsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['intervalValue'] != null) {
            queryParameters['interval_value'] = requestParameters['intervalValue'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['minValue'] != null) {
            queryParameters['min_value'] = requestParameters['minValue'];
        }

        if (requestParameters['maxValue'] != null) {
            queryParameters['max_value'] = requestParameters['maxValue'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}/sensors/{sensor_id}/measurements/confidence-intervals`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))).replace(`{${"sensor_id"}}`, encodeURIComponent(String(requestParameters['sensorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AggregatedMeasurementFromJSON));
    }

    /**
     * Get sensor measurements with confidence intervals for visualization.
     * Get Measurements With Confidence Intervals
     */
    async getMeasurementsWithConfidenceIntervalsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsConfidenceIntervalsGet(requestParameters: GetMeasurementsWithConfidenceIntervalsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsConfidenceIntervalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AggregatedMeasurement>> {
        const response = await this.getMeasurementsWithConfidenceIntervalsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsConfidenceIntervalsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Sensor Measurements
     */
    async getSensorMeasurementsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsGetRaw(requestParameters: GetSensorMeasurementsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListMeasurementsResponsePagination>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getSensorMeasurementsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsGet().'
            );
        }

        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling getSensorMeasurementsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsGet().'
            );
        }

        if (requestParameters['sensorId'] == null) {
            throw new runtime.RequiredError(
                'sensorId',
                'Required parameter "sensorId" was null or undefined when calling getSensorMeasurementsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['minMeasurementValue'] != null) {
            queryParameters['min_measurement_value'] = requestParameters['minMeasurementValue'];
        }

        if (requestParameters['maxMeasurementValue'] != null) {
            queryParameters['max_measurement_value'] = requestParameters['maxMeasurementValue'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['downsampleThreshold'] != null) {
            queryParameters['downsample_threshold'] = requestParameters['downsampleThreshold'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}/sensors/{sensor_id}/measurements`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))).replace(`{${"sensor_id"}}`, encodeURIComponent(String(requestParameters['sensorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListMeasurementsResponsePaginationFromJSON(jsonValue));
    }

    /**
     * Get Sensor Measurements
     */
    async getSensorMeasurementsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsGet(requestParameters: GetSensorMeasurementsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListMeasurementsResponsePagination> {
        const response = await this.getSensorMeasurementsApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdMeasurementsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
