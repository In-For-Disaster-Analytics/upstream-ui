/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Bbox } from './Bbox';
import {
    BboxFromJSON,
    BboxFromJSONTyped,
    BboxToJSON,
    BboxToJSONTyped,
} from './Bbox';
import type { LineStringCoordinatesInner } from './LineStringCoordinatesInner';
import {
    LineStringCoordinatesInnerFromJSON,
    LineStringCoordinatesInnerFromJSONTyped,
    LineStringCoordinatesInnerToJSON,
    LineStringCoordinatesInnerToJSONTyped,
} from './LineStringCoordinatesInner';

/**
 * LineString Model
 * @export
 * @interface LineString
 */
export interface LineString {
    /**
     * 
     * @type {Bbox}
     * @memberof LineString
     */
    bbox?: Bbox | null;
    /**
     * 
     * @type {string}
     * @memberof LineString
     */
    type: LineStringTypeEnum;
    /**
     * 
     * @type {Array<LineStringCoordinatesInner>}
     * @memberof LineString
     */
    coordinates: Array<LineStringCoordinatesInner>;
}


/**
 * @export
 */
export const LineStringTypeEnum = {
    LineString: 'LineString'
} as const;
export type LineStringTypeEnum = typeof LineStringTypeEnum[keyof typeof LineStringTypeEnum];


/**
 * Check if a given object implements the LineString interface.
 */
export function instanceOfLineString(value: object): value is LineString {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('coordinates' in value) || value['coordinates'] === undefined) return false;
    return true;
}

export function LineStringFromJSON(json: any): LineString {
    return LineStringFromJSONTyped(json, false);
}

export function LineStringFromJSONTyped(json: any, ignoreDiscriminator: boolean): LineString {
    if (json == null) {
        return json;
    }
    return {
        
        'bbox': json['bbox'] == null ? undefined : BboxFromJSON(json['bbox']),
        'type': json['type'],
        'coordinates': ((json['coordinates'] as Array<any>).map(LineStringCoordinatesInnerFromJSON)),
    };
}

export function LineStringToJSON(json: any): LineString {
    return LineStringToJSONTyped(json, false);
}

export function LineStringToJSONTyped(value?: LineString | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bbox': BboxToJSON(value['bbox']),
        'type': value['type'],
        'coordinates': ((value['coordinates'] as Array<any>).map(LineStringCoordinatesInnerToJSON)),
    };
}

