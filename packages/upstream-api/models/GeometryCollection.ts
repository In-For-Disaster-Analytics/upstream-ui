/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GeometryCollectionGeometriesInner } from './GeometryCollectionGeometriesInner';
import {
    GeometryCollectionGeometriesInnerFromJSON,
    GeometryCollectionGeometriesInnerFromJSONTyped,
    GeometryCollectionGeometriesInnerToJSON,
    GeometryCollectionGeometriesInnerToJSONTyped,
} from './GeometryCollectionGeometriesInner';
import type { Bbox } from './Bbox';
import {
    BboxFromJSON,
    BboxFromJSONTyped,
    BboxToJSON,
    BboxToJSONTyped,
} from './Bbox';

/**
 * GeometryCollection Model
 * @export
 * @interface GeometryCollection
 */
export interface GeometryCollection {
    /**
     * 
     * @type {Bbox}
     * @memberof GeometryCollection
     */
    bbox?: Bbox | null;
    /**
     * 
     * @type {string}
     * @memberof GeometryCollection
     */
    type: GeometryCollectionTypeEnum;
    /**
     * 
     * @type {Array<GeometryCollectionGeometriesInner>}
     * @memberof GeometryCollection
     */
    geometries: Array<GeometryCollectionGeometriesInner>;
}


/**
 * @export
 */
export const GeometryCollectionTypeEnum = {
    GeometryCollection: 'GeometryCollection'
} as const;
export type GeometryCollectionTypeEnum = typeof GeometryCollectionTypeEnum[keyof typeof GeometryCollectionTypeEnum];


/**
 * Check if a given object implements the GeometryCollection interface.
 */
export function instanceOfGeometryCollection(value: object): value is GeometryCollection {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('geometries' in value) || value['geometries'] === undefined) return false;
    return true;
}

export function GeometryCollectionFromJSON(json: any): GeometryCollection {
    return GeometryCollectionFromJSONTyped(json, false);
}

export function GeometryCollectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeometryCollection {
    if (json == null) {
        return json;
    }
    return {
        
        'bbox': json['bbox'] == null ? undefined : BboxFromJSON(json['bbox']),
        'type': json['type'],
        'geometries': ((json['geometries'] as Array<any>).map(GeometryCollectionGeometriesInnerFromJSON)),
    };
}

export function GeometryCollectionToJSON(json: any): GeometryCollection {
    return GeometryCollectionToJSONTyped(json, false);
}

export function GeometryCollectionToJSONTyped(value?: GeometryCollection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bbox': BboxToJSON(value['bbox']),
        'type': value['type'],
        'geometries': ((value['geometries'] as Array<any>).map(GeometryCollectionGeometriesInnerToJSON)),
    };
}

