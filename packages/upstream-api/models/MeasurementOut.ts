/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MeasurementOut
 */
export interface MeasurementOut {
    /**
     * 
     * @type {number}
     * @memberof MeasurementOut
     */
    measurementid: number;
    /**
     * 
     * @type {number}
     * @memberof MeasurementOut
     */
    sensorid?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MeasurementOut
     */
    variablename?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof MeasurementOut
     */
    collectiontime: Date;
    /**
     * 
     * @type {string}
     * @memberof MeasurementOut
     */
    variabletype?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MeasurementOut
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MeasurementOut
     */
    measurementvalue?: number | null;
}

/**
 * Check if a given object implements the MeasurementOut interface.
 */
export function instanceOfMeasurementOut(value: object): value is MeasurementOut {
    if (!('measurementid' in value) || value['measurementid'] === undefined) return false;
    if (!('collectiontime' in value) || value['collectiontime'] === undefined) return false;
    return true;
}

export function MeasurementOutFromJSON(json: any): MeasurementOut {
    return MeasurementOutFromJSONTyped(json, false);
}

export function MeasurementOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeasurementOut {
    if (json == null) {
        return json;
    }
    return {
        
        'measurementid': json['measurementid'],
        'sensorid': json['sensorid'] == null ? undefined : json['sensorid'],
        'variablename': json['variablename'] == null ? undefined : json['variablename'],
        'collectiontime': (new Date(json['collectiontime'])),
        'variabletype': json['variabletype'] == null ? undefined : json['variabletype'],
        'description': json['description'] == null ? undefined : json['description'],
        'measurementvalue': json['measurementvalue'] == null ? undefined : json['measurementvalue'],
    };
}

export function MeasurementOutToJSON(json: any): MeasurementOut {
    return MeasurementOutToJSONTyped(json, false);
}

export function MeasurementOutToJSONTyped(value?: MeasurementOut | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'measurementid': value['measurementid'],
        'sensorid': value['sensorid'],
        'variablename': value['variablename'],
        'collectiontime': ((value['collectiontime']).toISOString()),
        'variabletype': value['variabletype'],
        'description': value['description'],
        'measurementvalue': value['measurementvalue'],
    };
}

