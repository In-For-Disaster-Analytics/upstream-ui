/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MeasurementOut } from './MeasurementOut';
import {
    MeasurementOutFromJSON,
    MeasurementOutFromJSONTyped,
    MeasurementOutToJSON,
    MeasurementOutToJSONTyped,
} from './MeasurementOut';

/**
 * 
 * @export
 * @interface SensorItem
 */
export interface SensorItem {
    /**
     * 
     * @type {number}
     * @memberof SensorItem
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof SensorItem
     */
    alias: string;
    /**
     * 
     * @type {string}
     * @memberof SensorItem
     */
    description?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SensorItem
     */
    postprocess?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof SensorItem
     */
    postprocessscript?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SensorItem
     */
    units?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SensorItem
     */
    variablename: string;
    /**
     * 
     * @type {Array<MeasurementOut>}
     * @memberof SensorItem
     */
    measurements?: Array<MeasurementOut> | null;
}

/**
 * Check if a given object implements the SensorItem interface.
 */
export function instanceOfSensorItem(value: object): value is SensorItem {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('alias' in value) || value['alias'] === undefined) return false;
    if (!('variablename' in value) || value['variablename'] === undefined) return false;
    return true;
}

export function SensorItemFromJSON(json: any): SensorItem {
    return SensorItemFromJSONTyped(json, false);
}

export function SensorItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): SensorItem {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'alias': json['alias'],
        'description': json['description'] == null ? undefined : json['description'],
        'postprocess': json['postprocess'] == null ? undefined : json['postprocess'],
        'postprocessscript': json['postprocessscript'] == null ? undefined : json['postprocessscript'],
        'units': json['units'] == null ? undefined : json['units'],
        'variablename': json['variablename'],
        'measurements': json['measurements'] == null ? undefined : ((json['measurements'] as Array<any>).map(MeasurementOutFromJSON)),
    };
}

export function SensorItemToJSON(json: any): SensorItem {
    return SensorItemToJSONTyped(json, false);
}

export function SensorItemToJSONTyped(value?: SensorItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'alias': value['alias'],
        'description': value['description'],
        'postprocess': value['postprocess'],
        'postprocessscript': value['postprocessscript'],
        'units': value['units'],
        'variablename': value['variablename'],
        'measurements': value['measurements'] == null ? undefined : ((value['measurements'] as Array<any>).map(MeasurementOutToJSON)),
    };
}

